==================================
第一章：関数を用いた抽象概念の構築
==================================

..
  内容
  1.1導入
  1.1.1 Pythonでのプログラミング
  1.1.2 Python 3のインストール
  1.1.3 対話的セッション
  1.1.4 最初の例題
  1.1.5 実用的指導：エラー

導入
====

コンピューターサイエンスは極めて幅の広い学問分野である。分散システム、人工知能、ロボット工学、グラフィックス、サイバーセキュリティ、科学技術計算、コンピューターアーキテクチャ、およびそれらから派生する分野は、新たな技術や発見によって毎年拡大している。コンピューターサイエンスのこの急速な発展により、人間の生活においてコンピューターサイエンスが関わらない分野はほとんど無くなってしまった。広告、通信、科学、芸術、娯楽、そして政治に至るまで全てが、コンピューターサイエンスの領域として再発明されてしまった。

コンピューターサイエンスのこの驚くべき生産性は、華麗で強力ないくつかのアイデアを基礎としているからこそ為し得たのである。全ての計算は、情報を表現することと、情報を処理する論理と、論理の複雑さを織りなす抽象概念を設計することから始まっている。これらの基礎を習得するために我々は、コンピューターが如何にプログラムを解釈し計算プロセスを実行するか、正確に理解しなければならない。

カリフォルニア大学バークレー校では長い間、これらの基礎的なアイデアを教えるために、古典的教科書である「計算機プログラムの構造と解釈(SICP)(ハロルド・エイブルソン、ジェラルド・ジェイ・サスマン、ジュリー・サスマン 共著)」を用いてきた。ありがたいことに、原著者たちが上記の本に再利用可能なライセンスを認めている。そのため、この講義メモを作成するにあたって大いに参考にさせて頂いた。

我々の知的な旅の同行にあたり、乗客は予備知識を必要としないし、また必要のないものだと我々は考えている。

  我々は計算プロセスという概念を学習する予定である。計算プロセスとは計算機における抽象概念である。計算プロセスが発達していくと、データと呼ばれる他の抽象概念を操作することがことが分かるだろう。計算プロセスの発達は、プログラムと呼ばれる規則のパターンによって方向づけられている。人間は計算プロセスに指示を与えるためにプログラムを書く。実際、我々は呪文を唱えることによって、コンピューターの魂を呼び出しているのだ。
  
  計算プロセスを降臨させるために我々が使うプログラムは、まるで魔術師の呪文のようだ。呪文は記号表現を用いて注意深く構築されており、我々のプロセスが果たして欲しい処理を記述するために秘伝の深遠なプログラミング言語を使っている。
  
  計算プロセスは、正確にコンピューターが動作するならば、正確かつ厳密にプログラムを実行する。従って、見習いの魔術師のように、未熟なプログラマーは研鑽に励み、計算プロセスが呼び出される手順を理解し、対処しなければならない。


    --エイブルソン&サスマン, SICP(1993)

Pythonでのプログラミング
========================

  -- 言語とはあなたが慣れ親しんだように学ぶものではない
    -- アリカ オークレント

計算機にも分かるよう手続きを定義するために、我々はプログラミング言語を必要とする。いや、プログラミング言語とはむしろ、様々な人間と様々なコンピューターが手続きをしっかり理解するために必要とするものかもしれない。このコースでは、我々はプログラミング言語Pythonを学習していく。

Pythonは今や幅広く使われている言語であり、様々な仕事から求人が出されているほどだ。Webプログラマ、ゲームエンジニア、科学者、研究者、さらには新しいプログラミング言語の開発デザイナまで。あなたがPythonを学び始めたその時から、あなたはこれら何百万人もの強力な開発者コミュニティの一員なのだ。開発者コミュニティは極めて重要な組織だ。メンバーはお互いに、問題の解決を図ったり、コードとノウハウの共有をしたり、協力してソフトウェアや道具を作りあげていく。参加したメンバーは、その貢献に対して、しばしば名声や世界的な評価を得ていく。もしかするとあなたもいつの日か、エリートPythonista(訳註:Pythonを使う人のことをパイソニスタと呼ぶ)として名を挙げているかもしれない。

Pythonそのものは、巨大なボランティアコミュニティの成果物であり、彼らは自身たちの多種多様な成果に誇りを持っている。Pythonという言語は、1980年代後半にGuido van Rossum(訳註:グイド・ヴァン・ロッサム、GvRとも書く)によって創案され、実装された。彼の書いた「Python 3 Tutorial」の最初の章では、なぜPythonが数多ある言語の中から今日の人気を勝ち取ったのかが記してある。

Pythonは教育用言語として優れている。なぜなら、その歴史を振り返っても、Pythonの開発者はPythonコードが人間にとって理解しやすいことを重視しているからだ。その上、コードの美しさ、簡潔さ、可読性の基礎としてZen of Python(Pythonの禅)の精神を用いて強化している。Pythonはこのコースに特にふさわしい。というのも、Pythonの持つ幅広い機能は、我々がこれから探ろうとしている多種多様なプログラミングスタイルをサポー
トしているからだ。Pythonでのプログラミングに決まった一つのやり方というものは無いが、開発者コミュニティの中で共有されている約束事というものがある。その約束事が、プログラムを読んだり、理解したり、既存のプログラムを拡張するのを助けてくれる。そうして、Pythonが持つ素晴らしい柔軟性と理解のしやすさが組み合わさることで、学生が様々なプログラミングパラダイムを探り、そこで得た新たな知識を多数の進行中のプロジ
ェクトに応用することを助けてくれる。

この一連の講義メモは、抽象化されたデザインと厳格な計算モデルを応用した技術を紹介すると共に、Pythonの機能を解説することで、SICPの精神を守り伝えていくことを狙いとしている。加えて、この講義メモは、いくつかの進んだ言語機能と図解した例題を含む、Pythonプログラミングへの実践的導入書となるだろう。このコースを進めていけばきっと、あなたは自然とPythonを学ぶことが出来る。

しかしながら、Pythonは多くの機能を備えたリッチな言語であるため、我々がコンピューターサイエンスの基礎的な概念を学ぶにつれて、その機能をじっくりと段階的に説明していくことにする。Pythonの機能を一気に網羅的に学習したいという意欲的な学生には、Mark Pilgrimの書いたDive Into Python 3をオススメする。これはオンラインで無料で読むことが出来る。この本の目的はこのコースの目的とは異なっているが、Pythonを使う上で非常に有用な実用的な情報を含んでいる。注意すべきこととして、この講義メモと異なり、Dive Into Python 3は読者が何かしらのプログラミングの経験があることを想定している。

Pythonプログラミングを始める最良の方法は直接インタプリタを触ってみることだ。このセクションではPython 3のインストール方法と、インタプリタを用いた対話環境の初期設定と、プログラミングの始め方を説明している。

Python 3のインストール
======================

全ての優れたソフトウェアと同様に、Pythonもまた、いくつかのバージョンがある。このコースでは最新の安定板であるPython 3(執筆時はPython 3.2)を用いることにする。多くのコンピューターでは古くなったバージョンのPythonが既にインストールされているが、このコースでは必要ない。あなたはどんなコンピューターを用いてもよいが、Python 3がインストールされている前提で話を進める。心配は要らない、Pythonは無料である。

Dive Into Python 3では主要なプラットフォームでのインストール手順が記されている。これらの手順はPython 3.1で書かれているが、あなたがインストールするときはPython 3.2の方が良いだろう(このコースにおいては大した違いではないけれど)。カリフォルニア大学バークレー校電気電子工学及びコンピューターサイエンス学部(UCB EECS)に備わっている教育用マシンには、既にPython 3.2がインストールされている。

対話的セッション
================

Pythonの対話的セッションにおいては、あなたは何かしらのコードをプロンプト

  >>>

の後に入力することになる。Pythonインタプリタは入力された事柄を読み取って評価し、様々なコマンドを計算する。

対話的セッションを開始するにはいくつかの方法がある。その方法はそれぞれ特徴があり異なっている。とりあえず全ての方法を試してみて、好みの方法を見つけて欲しい。以下の方法は全て同じインタプリタを使っている。

  ・Python 3を走らせるために最も単純で広く使われている方法は、ターミナルのプロンプトでpython3と入力することである(Mac/Unix/Linux)。Windowsの場合はPython 3アプリケーションを開くことである。
  
  ・上の方法よりユーザーフレンドリな方法は、Idle 3(idle3)と呼ばれるアプリケーションを起動することである。Idleは書いたコードを色付けし(シンタックスハイライトと呼ぶ)、使い方のヒントを提示し、ソースコードのエラー部分に印を付けてくれる。IdleはいつもPythonに同梱されている。つまり、あなたは既にそれを使える状態にある。
  
  ・Emacsエディタ内で対話的セッションをバッファとして走らせることが出来る。学習に多少のコストはかかるものの、Emacsはどんなプログラミング言語にとっても強力で万能なエディタである。使い始めるにはこの講座のEmacsチュートリアル(訳註:後述リンク)を読むと良い。

  
  | // 訳者註：UCB EECSのコースCS61A( http://cs61a.org )に、
  | // Emacs, SublimeText, Vimのチュートリアルがありました。
  | // お好みのものを使って下さい。
  | //
  | // Emacs
  | // http://cs61a.org/lab/emacs/
  | //
  | // Sublime Text
  | // http://cs61a.org/lab/sublime/
  | //
  | // Vim
  | // http://cs61a.org/lab/vim/

多くの場合、Pythonプロンプトは >>> で表される。対話的セッションの開始に成功すると、それが表示される。この講義メモではプロンプトを用いて例を記述する。以下がその例だ。


  >>> 2 + 2
  4

使い方：各セッションでは、どんな入力があったかというヒストリを記録している。ヒストリにアクセスするためには、<Control>-P(前へ戻る)もしくは<Control>-N(次へ進む)を押す(訳註:Ctrlキーを押しながらPやNのキーを押す)。<Control>-Dでセッションを抜けることが出来る。その際、このヒストリも消えてしまう。

最初の例題
==========

  | And, as imagination bodies forth
  | The forms of things to unknown, and the poet's pen
  | Turns them to shapes, and gives to airy nothing
  | A local habitation and a name.

    ―ウイリアム・シェイクスピア、真夏の夜の夢

Pythonの導入として、Pythonの言語機能をいくつか用いた例題から始めようと思う。次のセクションにおいては、我々はゼロから始めて、言語を一つ一つ積み上げていく。このセクションは実装予定の強力な言語機能の予習だと考えてほしい。

Pythonは組み込み関数というものを持っている。組み込み関数とは、構文解析、グラフィック表示、インターネット経由でのコミュニケーションなど、様々な分野に共通する機能のサポートをするものである。

Import文を用いて


  >>> from urllib.request import urlopen


と組み込み関数を読み込めば、インターネット上のデータにアクセスできるようになる。上の例では、urlopenと呼ばれる関数が利用できるようになる。urlopen関数は、インターネット上のモノの場所を示す、統一リソースロケータ(URL)内のコンテンツへのアクセスを可能にしてくれる。

**文と式**

Pythonのコードは文と式から成り立っている。もっと言えば、コンピュータープログラムというのは以下の二つの手順から成り立っている。

  1.何らかの値を計算する

  2.何らかのアクションを起こす

文はアクションを記述する際に特に使われる。Pythonインタプリタが文を実行するとき、それに対応するアクションも実行される。一方、式は与えられた値を計算する際に特に用いられる。Pythonが式を評価するとき、Pythonは式の値を計算する。この章では何種類かの文と式を紹介する。

次の代入文を見て欲しい。

  >>> shakespeare = urlopen('http://inst.eecs.berkeley.edu/~cs61a/fa11/shakespeare.txt')

これはshakespeareという変数に、後に続く式の値を代入している。この式ではurlopen関数をURLに適用している。URLの先には、ウイリアム・シェイクスピアの37の戯曲の全文を、単一のテキストファイルにまとめたものが置かれている。

**関数**

関数はデータを操作するロジックをひとかたまりにしたものである。Webアドレスはデータの一つであり、シェイクスピアの戯曲もまた然りである。前者が後者へと変換されるプロセスは複雑かもしれないが、我々は、単純な式だけを使ってそのプロセスを利用出来る。何故ならば、その複雑さは関数の中に閉じ込められているからだ。

関数はこの章の主題である。
ここで別の代入文を見てみよう。

  >>> words = set(shakespeare.read().decode().split())

この文はwordsという変数に、シェイクスピアの戯曲に現れる単語の集合を代入している。シェイクスピアの戯曲に現れる単語の数は、重複なく数えると33,721語に達する。read、decode、splitといったコマンドの連なりは、それぞれ中間に出来る、コンピューターが扱うデータの操作をしている。つまり、データはURLを開いて読み取られ、そのデータを復号してテキストへ変換し、さらにテキストを単語へ分割している。そこで分割された全ての単語はsetという集合に収められる。

**オブジェクト**

集合はオブジェクトの一種であり、それは集合の共通部分を求めたり、や集合の元をテストしたりといった、集合の演算をサポートするオブジェクトである。オブジェクトは、データとデータを操作するロジックを継ぎ目なくまとめたものであり、それはデータやロジックの複雑さを隠してくれる。オブジェクトは第二章の主題である。

次の式、

  >>> {w for w in words if len(w) >= 5 and w[::-1] in words}
  {'madam', 'stink', 'leets', 'rever', 'drawer', 'stops', 'sessa',
  'repaid', 'speed', 'redder', 'devil', 'minim', 'spots', 'asses',
  'refer', 'lived', 'keels', 'diaper', 'sleek', 'steel', 'leper',
  'level', 'deeps', 'repel', 'reward', 'knits'}

これは、シェイクスピアの戯曲の単語の集合を、前から評価した式と後ろから評価した式を組み合わせたものである。暗号めいた表記の w[::-1] は、単語の各文字を -1 と宣言することで後ろから順番に数え上げている。(::はデフォルトでは、最初から最後に向かって文字を順番に数え上げていく) 対話的セッションにあなたが式を入力するとき、Pythonは次の行にその式の値を表示します。

**インタプリタ**

組み合わせた式を評価する際には、予測可能な方法で式を判断する正確な手続きが必要となる。文と式を組み合わせて評価するような手続きを実装したプログラムは、インタプリタと呼ばれる。インタプリタの設計と実装は第三章の主題である。

他のコンピュータープログラムと比較したとき、プログラミング言語のためのインタプリタは一般的にユニークである。Pythonはシェイクスピアや回文のためにデザインされた言語ではないことは予め伝えておこう。しかしながら、Pythonのその大きな柔軟性は、我々がほんの数行のコードで大量のテキストを処理することを許可している。

最後になったが、我々は以下のような中心となる概念に関連する事柄を見ていく予定である。関数とオブジェクトであり、オブジェクトは関数であり、そしてインタプリタはそれら両方のインスタンスである。しかしながら、コードを組み立てていく中で、これらの概念と役割を明確に理解していくことは、プログラミングの神髄を理解していく上で重要なことである。

実践的指導:エラー
=================


